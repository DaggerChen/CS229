# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RNt3_r8_YxWt5BubRN0zeTqUcj5Ni4I5
"""

from sklearn.model_selection import train_test_split
import pandas as pd
import os
import librosa
import librosa.display
import cv2
import numpy as np
import json
import matplotlib.pyplot as plt
import warnings
warnings.simplefilter("ignore")

# Download coughvid data in CDF format
# Run once 
!git clone "https://github.com/virufy/virufy-cdf-coughvid.git"

cough_vid = pd.read_csv("virufy-cdf-coughvid/virufy-cdf-coughvid.csv")

from google.colab import drive
drive.mount('drive')

file = pd.read_json("/content/drive/MyDrive/Colab Notebooks/cough/train_features.json")
test_file = pd.read_json("/content/drive/MyDrive/Colab Notebooks/cough/test_features.json")

cough_vid=cough_vid.set_index("patient_id")

file.columns[0]

label = file.loc["label"].values
test_label = test_file.loc["label"].values

test_label.shape

features = file.loc["rawMFCC"].values
test_features = test_file.loc["rawMFCC"].values

features

df = pd.DataFrame(features.tolist())
test_df = pd.DataFrame(test_features.tolist())
df["label"] = label
test_df["label"] = test_label
df.replace({"positive":1, "negative":0}, inplace=True)
test_df.replace({"positive":1, "negative":0}, inplace=True)

df = df.set_index(file.columns)
test_df = test_df.set_index(test_file.columns)

test_df

cough_vid

clean_cough_vid = cough_vid.drop(['Unnamed: 0', 'source', 'covid_symptoms', 'cough_path', 'biological_sex', 'reported_gender', 'submission_date', 'pcr_test_date', 'pcr_result_date', 'pcr_test_result', 'pcr_test_result_inferred'], axis=1)

clean_cough_vid

joined_df = df.join(clean_cough_vid)
joined_test_df = test_df.join(clean_cough_vid)

joined_test_df

# joined_df['biological_sex'].replace({"male":1, "female":0}, inplace=True)
joined_df['respiratory_condition'].replace({True:1, False:0}, inplace=True)
joined_df['fever_or_muscle_pain'].replace({True:1, False:0}, inplace=True)
# joined_df['covid_symptoms'].replace({True:1, False:0}, inplace=True)
# joined_test_df['biological_sex'].replace({"male":1, "female":0}, inplace=True)
joined_test_df['respiratory_condition'].replace({True:1, False:0}, inplace=True)
joined_test_df['fever_or_muscle_pain'].replace({True:1, False:0}, inplace=True)
# joined_test_df['covid_symptoms'].replace({True:1, False:0}, inplace=True)

joined_df

df = df[df["cough_detected"] >= 0.7]

joined_df.shape

joined_test_df.shape

joined_df.label.value_counts()

joined_test_df.label.value_counts()

joined_df

test_df

X = joined_df.drop(["label"],axis=1)
test_X = joined_test_df.drop(["label"],axis=1)
y = joined_df.label
test_y = joined_test_df.label

X

X = df.drop(["label"],axis=1)
test_X = test_df.drop(["label"],axis=1)
y = df.label
test_y = test_df.label

X

import lightgbm as lgb
from sklearn.metrics import accuracy_score, f1_score, recall_score

f1s = []
recalls = []
accs = []
max_acc = 0
max_f1 = 0
max_recall = 0
for weight in range(1, 100, 1):
  clf = lgb.LGBMClassifier(class_weight={1:weight, 0: 1})
  clf.fit(X, y)
  y_predict = clf.predict(test_X)
  f1s.append(f1_score(test_y, y_predict))
  accs.append(accuracy_score(test_y, y_predict))
  recalls.append(recall_score(test_y, y_predict))
max_acc = max(accs)
pos1 = np.argmax(accs)
max_f1 = max(f1s)
pos2 = np.argmax(f1s)
max_recall = max(recalls)
pos3 = np.argmax(recalls)

print('pos1', pos1)
print('pos2', pos2)
print('pos3', pos3)
print('max accuracy', max_acc)
print('max f1', max_f1)
print('max recall', max_recall)
print(f1s)

recalls[3]
